
package hw8.spp;

import hw8.graph.Edge;
import hw8.graph.Graph;
import hw8.graph.Vertex;

import java.util.Map;
import java.util.HashMap;
import java.util.HashSet;
import java.util.PriorityQueue;
import java.util.List;
import java.util.Comparator;


public class DijkstraStreetSearcher extends StreetSearcher {

  /**
   * Creates a StreetSearcher object.
   *
   * @param graph an implementation of Graph ADT.
   */
  public DijkstraStreetSearcher(Graph<String, String> graph) {
    super(graph);
  }

  @Override
  public void findShortestPath(String startName, String endName) {
//    try { // THIS WORKS. Catch and then print message. Then must also return
//      checkValidEndpoint(startName);
//      checkValidEndpoint(endName);
//    } catch (IllegalArgumentException e) {
//      System.out.println(e.getMessage());
//      return;
//    }

    Vertex<String> start = vertices.get(startName);
    Vertex<String> end = vertices.get(endName);
    // do I need to check validity of start and end points?
    // Yes. check for null start and/or null end.

//
//    if (start == null) {
//      System.out.println("Invalid endpoint: " + startName);
//      return;
//    }
//    if (end == null) {
//      System.out.println("Invalid endpoint: " + endName);
//      return;
//    }

    // check owner, check if not in vertices,
    if (start == null || !vertices.containsKey(startName)) {
      System.out.println("Invalid endpoint: " + startName);
      return;
    }
    if (end == null || !vertices.containsKey(endName)) {
      System.out.println("Invalid endpoint: " + endName);
      return;
    }



    double totalDist = -1;  // totalDist must be update below

    // TODO - Implement Dijkstra Algorithm!
    HashMap<Vertex<String>, Double> distances = new HashMap<>();

    HashSet<Vertex<String>> explored = new HashSet<>();


    for (Map.Entry<String, Vertex<String>> entry : vertices.entrySet()) {
      Vertex<String> vtx = entry.getValue();
      if (!vtx.equals(start)) {
        distances.put(vtx, MAX_DISTANCE);
      }
    }
    distances.put(start, 0.0);

    smallerDistanceHigherPriority cmp = new smallerDistanceHigherPriority(distances);

    PriorityQueue<Vertex<String>> vQueue = new PriorityQueue<>(cmp);
    vQueue.add(start);

    while (!explored.contains(end) && !vQueue.isEmpty()) {
      Vertex<String> cur = vQueue.poll(); // top element. Returns null if queue is empty.
      // but should have already checked for that above.
      explored.add(cur); // already checked if queue is empty so this should not add null.
      totalDist = distances.get(cur); // if there was anything to add to the queue, it was added
      // in the previous loop iteration (or above when adding the source) to both queue AND "distances"
      // suppose we add our last element. Then we updated "distances" and queue on the prev iteration
      // already, when we added that last element. Now we enter this new iteration and pop it, and
      // update totalDist with it. Then we go through the loop body and have nothing to add.
      // Since we've added nothing, we fail to enter the new loop body.
      // Queue is empty and totalDist is updated appropriately.


      Double currentNeighborsDist = 0.0;
      Iterable<Edge<String>> outgoingEdges = graph.outgoing(cur); // using the iterable.
      for (Edge<String> edge : outgoingEdges) {
        Vertex<String> neighbor = graph.to(edge);
        if (!explored.contains(neighbor)) { // not finalized yet.
          currentNeighborsDist = distances.get(cur) + (Double) graph.label(edge);
          if (!vQueue.contains(neighbor)) { // haven't visited it at all yet.
            distances.put(neighbor, currentNeighborsDist);
            graph.label(neighbor, edge); // neighbor is edge's "to", edge is its incoming edge
            // this amounts to setting the "previous"
            vQueue.add(neighbor);
          } else { // have visited it before.
            Double neighborsOriginalDist = distances.get(neighbor);
            if (currentNeighborsDist < neighborsOriginalDist) { // found a new shorter path
              vQueue.remove(neighbor); // remove to re-add it so it's def in the right place.
              graph.label(neighbor, edge); // rewire the "previous" cuz found a new shortest path.
              distances.put(neighbor, currentNeighborsDist);
              vQueue.add(neighbor);
            } // else, already visited it, but the new path is not a shorter one, so leave it as is.
          }
        }
      } // finished loop, found nearest neighbor if any neighbors were left to explore. If queue
      // is now empty, won't enter another iteration of the loop. Otherwise, we'll get the next element
      // to explore.
      // we also add the next best element to "explored" if it exists at the top of the loop.
//      if (!explored.contains(end)) {
//        System.out.println("No path found");
//      }
    }

    /**
     * Function sketch
     *
     * Vertex<String> cur = source;
     * while (!explored.contains(end)) { // OR QUEUE IS EMPTY.
     *  int nearestNeighborsDist = 0;
     *  for every neighbor:
     *    if (!explored.contains(neighbor)) {
     *      neighborDist = distances.get(cur) + edge's weight;
     *      if (!vQueue.contains(neighbor) { // could it ever be null?
     *        distances.put(neighbor, currentNeighborsDist);
     *        set previous;
     *        vQueue.add(neighbor);
     *      } else {
     *        if (neighborDist < originalDist) {
     *          vQueue.remove(neighbor);
     *          rewire the previous;
     *          distances.put(neighbor, neighborDist); // ONLY UPDATE IF NEED TO.
     *          vQueue.add(neighbor);
     *        } else { // already visited it (not finalized as "explored" though) and do not need to
     *        // update distance because original distance was smaller
     *          neighborDist = distance.get(neighbor);
     *          }
     *      }
     *      if (neighborDist < nearestNeighborsDist) nearestNeighborsDist = newDist;
     *  }
     *  Vertex<String> nearestNeighbor = vQueue.pop(); // MAKE SURE QUEUE IS NOT EMPTY WHEN POPPING
     *  totalDist = distances.get(nearestNeighbor);
     *  explored.add(nearestNeighbor);
     *  vQueue.add(nearestNeighbor); // no, was already added!
     *  cur = nearestNeighbor; // not really necessary if you set cur = queue.poll() at top of loop
     * }
     *
     *
     */



    // END my TODO

    // These method calls will create and print the path for you
    List<Edge<String>> path = getPath(end, start);
    if (VERBOSE) {
      printPath(path, totalDist);
    }
  }



  private static class smallerDistanceHigherPriority implements Comparator<Vertex<String>> {

    HashMap<Vertex<String>, Double> distancesSet;
    //HashSet<VertexDistancePair> distancesSet;

    @Override
    public int compare(Vertex<String> v1, Vertex<String> v2) {
      return Double.compare(distancesSet.get(v1), distancesSet.get(v2));
    }

    private smallerDistanceHigherPriority(HashMap<Vertex<String>, Double> d) {
      // Dokyung told me to put in the hashmap as a parameter. It is used below.
      distancesSet = d;
    }

//    private smallerDistanceHigherPriority(HashSet<VertexDistancePair> d) {
//      distancesSet = d;
  }

//    @Override
//    public int compare(VertexDistancePair v1, VertexDistancePair v2) {
//
//    }
}
